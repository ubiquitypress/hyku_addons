<% # NOTE: This partial is being over written so that we can append the simplfied_admin_set css for hiding the relationship tab %>
<%= simple_form_for [main_app, @form], html: { data: { behavior: 'work-form', 'param-key' => @form.model_name.param_key }, multipart: true } do |f| %>
	<% # We need to hide the tab trigger so that no users can't (easily) access the relationships tab content. %>
	<% # Doing this via the form_tabs_for monkey patch, removed the tab contents completely, but also removed the admin_set_id field %>
	<% # which caused the JavaScript which toggles permissions available to the user to not properly find the correct work flow permissions options %>
	<% if simplified_admin_set_for_form?(form: f.object) %>
		<style>
			a[aria-controls="relationships"] { display: none !important; }
		</style>
	<% end %>

  <% if f.object.errors.any? %>
    <div class="alert alert-danger alert-dismissable" role="alert">
      <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      <%= f.object.errors.full_messages_for(:base).send(SimpleForm.error_method) %>
      <%= render 'form_in_works_error', f: f %>
      <%= render 'form_ordered_members_error', f: f %>
      <%= render 'form_collections_error', f: f %>
      <%= render 'form_visibility_error', f: f %>
    </div>
  <% end %>

  <% if Flipflop.inline_doi? %>
    <div class="row">
      <div class="col-xs-12 col-sm-8">
        <div class="panel panel-default">
          <div class="form-tab-content">
            <%# Non form input for the DOI search %>
            <p class="help-block"><%= t("hyrax.works.form.autofill.searchbox.hint") %></p>
            <input type="text" id="doi-search" name="doi-search" class="form-control" placeholder="<%= t("hyrax.works.form.autofill.searchbox.placeholder") %>" ><br />
            <%= link_to t("hyrax.works.form.autofill.button.long_text"),
              Hyrax::DOI::Engine.routes.url_helpers.autofill_path,
              remote: true,
              method: :get,
              data: {
                confirm: t("hyrax.works.form.autofill.button.confirm"),
                disable_with: t("hyrax.works.form.autofill.button.disable_with"),
                params: { curation_concern: curation_concern.class.name.underscore }
              },
              class: 'btn btn-primary',
              id: 'doi-autofill-btn' %>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <% if Flipflop.batch_upload? && f.object.new_record? %>
    <% provide :metadata_tab do %>
      <p class="switch-upload-type">To create a separate work for each of the files, go to <%= link_to "Batch upload", hyrax.new_batch_upload_path %></p>
    <% end %>
  <% end %>
  <%= render 'hyrax/base/guts4form', f: f, tabs: form_tabs_for(form: f.object) %>
<% end %>

<script type="text/javascript">
  Blacklight.onLoad(function() {
    <%# This causes the page to switch back to the default template if they've
        previously visited the batch download page in this Turbolinks session %>
    $("#fileupload").fileupload('option', 'downloadTemplateId', 'template-download')
  });
</script>

<% if Flipflop.inline_doi? %>
  <script type="text/javascript">
    // Append the DOI filled in the form to the request
    // Note this uses jQuery since we're using jquery-ujs still
    // There is probably a better way to do this but this works for now
    $("#doi-autofill-btn").on("ajax:beforeSend", function(e, xhr, settings) {
      doi = $('<%= "#doi-search" %>').val()
      settings.url = settings.url + "&doi=" + encodeURIComponent(doi)
    });

    $("#doi-create-draft-btn").on("ajax:error", function(e, xhr, status, error) {
      alert(xhr.responseText);
    });

    // To override this action and add your own ajax error listener, you can use jQuery's `off` method,
    // before registering your own listener. E.g. $("#doi-autofill-btn").off("ajax:error")
    $("#doi-autofill-btn").on("ajax:error", function(e, xhr, status, error) {
      alert(xhr.responseText);
    });

    // Force the user to confirm using fallback defaults when DataCite mandatory fields
    // not filled in on the deposit form.  This only applies when the DOI is set to become
    // registered or findable.  Let drafts be drafts.
    $(document).ready(function() {
      curation_concern = '<%= curation_concern.class.name.underscore %>';
      document.getElementById('with_files_submit').addEventListener("click", function(event){
        if (["findable", "registered"].indexOf(document.querySelector('input[name="' + curation_concern + '[doi_status_when_public]"]:checked').value) < 0)
          return;

        const empty_fields = [];
        if (document.querySelector('.' + curation_concern + '_title .form-control').value == "")
          empty_fields.push("Title")
        if (document.querySelector('.' + curation_concern + '_creator .form-control').value == "")
          empty_fields.push("Creator")
        if (document.querySelector('.' + curation_concern + '_publisher .form-control').value == "")
          empty_fields.push("Publisher")
        if (document.querySelector('.' + curation_concern + '_date_created .form-control').value == "")
          empty_fields.push("Date Created")
        if (empty_fields.length == 0)
          return;

        if(!window.confirm("DataCite DOI mandatory fields ("+ empty_fields.join(', ') +") are missing.  Placeholder values will be submitted to DataCite instead.  Do you want to proceed?")){
          event.preventDefault();
          event.stopImmediatePropagation();
        }
      }, false);
    });
  </script>
<% end %>
